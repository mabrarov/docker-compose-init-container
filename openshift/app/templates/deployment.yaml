{{- $trustStoreFilename := "truststore.jks" -}}
{{- $serverKeyStoreFilename := "keystore.p12" -}}
{{- $serviceCertificateFilename := "tls.crt" -}}
{{- $servicePrivateKeyFilename := "tls.key" -}}
apiVersion: "apps/v1"
kind: "Deployment"
metadata:
  name: {{ include "app.deploymentName" . | quote }}
  labels:
    {{- include "app.labels" . | nindent 4 }}
    {{- include "app.componentLabels" . | nindent 4 }}
    {{- if .Values.labels }}
    {{- include "app.tplValuesRender" (dict "value" .Values.labels "context" $) | nindent 4 }}
    {{- end }}
    {{- if .Values.deploymentLabels }}
    {{- include "app.tplValuesRender" (dict "value" .Values.deploymentLabels "context" $) | nindent 4 }}
    {{- end }}
  {{- if or .Values.annotations .Values.deploymentAnnotations }}
  annotations:
    {{- if .Values.annotations }}
    {{- include "app.tplValuesRender" (dict "value" .Values.annotations "context" $) | nindent 4 }}
    {{- end }}
    {{- if .Values.deploymentAnnotations }}
    {{- include "app.tplValuesRender" (dict "value" .Values.deploymentAnnotations "context" $) | nindent 4 }}
    {{- end }}
  {{- end }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      {{- include "app.matchLabels" . | nindent 6 }}
      {{- include "app.componentLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "app.labels" . | nindent 8 }}
        {{- include "app.componentLabels" . | nindent 8 }}
        {{- if .Values.labels }}
        {{- include "app.tplValuesRender" (dict "value" .Values.labels "context" $) | nindent 8 }}
        {{- end }}
        {{- if .Values.podLabels }}
        {{- include "app.tplValuesRender" (dict "value" .Values.podLabels "context" $) | nindent 8 }}
        {{- end }}
      annotations:
        checksum/secret: {{ omit (include (print $.Template.BasePath "/app-secret.yaml") . | fromYaml) "metadata" | toYaml | sha256sum | quote }}
        {{- if .Values.annotations }}
        {{- include "app.tplValuesRender" (dict "value" .Values.annotations "context" $) | nindent 8 }}
        {{- end }}
        {{- if .Values.podAnnotations }}
        {{- include "app.tplValuesRender" (dict "value" .Values.podAnnotations "context" $) | nindent 8 }}
        {{- end }}
    spec:
      {{- if .Values.image.pullSecret }}
      imagePullSecrets:
        - name: {{ include "app.imagePullSecretName" . | quote }}
      {{- end }}
      containers:
        - name: {{ .Values.containerName | quote }}
          image: {{ include "app.mainContainer.imageFullName" . | quote }}
          imagePullPolicy: {{ .Values.image.pullPolicy | quote }}
          env:
            - name: "JAVA_TOOL_OPTIONS"
              value: {{ include "app.finalJvmOptions" . | quote }}
            - name: "TRUST_STORE_FILE"
              value: {{ printf "%s/%s" .Values.app.configDir $trustStoreFilename | quote }}
            - name: "TRUST_STORE_PASSWORD"
              valueFrom:
                secretKeyRef:
                  name: {{ include "app.secretName" . | quote }}
                  key: "trustStorePassword"
            - name: "SERVER_PORT"
              value: {{ .Values.app.port | quote }}
            - name: "SERVER_SSL_ENABLED"
              value: "true"
            - name: "SERVER_SSL_KEY_STORE"
              value: {{ printf "%s/%s" .Values.app.configDir $serverKeyStoreFilename | quote }}
            - name: "SERVER_SSL_KEY_STORE_PASSWORD"
              valueFrom:
                secretKeyRef:
                  name: {{ include "app.secretName" . | quote }}
                  key: serverKeyStorePassword
            - name: "SERVER_SSL_KEY_STORE_TYPE"
              value: "PKCS12"
            - name: "SERVER_SSL_KEY_ALIAS"
              value: {{ .Values.app.tls.keyAlias | quote }}
          ports:
            - name: {{ include "app.containerPortName" . | quote }}
              containerPort: {{ .Values.app.port }}
          livenessProbe:
            httpGet:
              path: "/actuator/health/liveness"
              port: {{ include "app.containerPortName" . | quote }}
              scheme: {{ include "app.containerPortScheme" . | upper | quote }}
            initialDelaySeconds: {{ .Values.livenessProbe.initialDelay }}
          readinessProbe:
            httpGet:
              path: "/actuator/health/readiness"
              port: {{ include "app.containerPortName" . | quote }}
              scheme: {{ include "app.containerPortScheme" . | upper | quote }}
            initialDelaySeconds: {{ .Values.readinessProbe.initialDelay }}
          securityContext:
            readOnlyRootFilesystem: {{ .Values.securityContext.readOnlyRootFilesystem }}
            runAsNonRoot: {{ .Values.securityContext.readOnlyRootFilesystem }}
            {{- if .Values.securityContext.runAsUser }}
            runAsUser: {{ .Values.securityContext.runAsUser }}
            {{- end }}
            {{- if .Values.securityContext.runAsGroup }}
            runAsGroup: {{ .Values.securityContext.runAsGroup }}
            {{- end }}
          volumeMounts:
            - mountPath: {{ .Values.app.configDir | quote }}
              name: "config"
              readOnly: true
            - mountPath: "/tmp"
              name: "app-tmp"
      initContainers:
        - name: {{ .Values.init.containerName | quote }}
          image: {{ include "app.initContainer.imageFullName" . | quote }}
          imagePullPolicy: {{ .Values.init.image.pullPolicy | quote }}
          env:
            - name: "CA_BUNDLE_FILE"
              value: {{ include "app.serviceCaCertifciateMountPath" . | quote }}
            - name: "TRUST_STORE_FILE"
              value: {{ printf "%s/%s" .Values.app.configDir $trustStoreFilename | quote }}
            - name: "TRUST_STORE_PASSWORD"
              valueFrom:
                secretKeyRef:
                  name: {{ include "app.secretName" . | quote }}
                  key: "trustStorePassword"
            - name: "CA_CRT_FILE"
              value: {{ include "app.serviceCaCertifciateMountPath" . | quote }}
            - name: "CRT_FILE"
              value: {{ printf "%s/%s" (include "app.serviceTlsSecretMountPath" .) $serviceCertificateFilename | quote }}
            - name: "KEY_FILE"
              value: {{ printf "%s/%s" (include "app.serviceTlsSecretMountPath" .) $servicePrivateKeyFilename | quote }}
            - name: "KEYSTORE_FILE"
              value: {{ printf "%s/%s" .Values.app.configDir $serverKeyStoreFilename | quote }}
            - name: "KEYSTORE_PASSWORD"
              valueFrom:
                secretKeyRef:
                  name: {{ include "app.secretName" . | quote }}
                  key: serverKeyStorePassword
            - name: "KEY_ALIAS"
              value: {{ .Values.app.tls.keyAlias | quote }}
          securityContext:
            readOnlyRootFilesystem: {{ .Values.securityContext.readOnlyRootFilesystem }}
            runAsNonRoot: {{ .Values.securityContext.readOnlyRootFilesystem }}
            {{- if .Values.securityContext.runAsUser }}
            runAsUser: {{ .Values.securityContext.runAsUser }}
            {{- end }}
            {{- if .Values.securityContext.runAsGroup }}
            runAsGroup: {{ .Values.securityContext.runAsGroup }}
            {{- end }}
          volumeMounts:
            - mountPath: {{ .Values.app.configDir | quote }}
              name: "config"
            - mountPath: "/tmp"
              name: "init-tmp"
            - mountPath: {{ include "app.serviceTlsSecretMountPath" . | quote }}
              name: "service-tls"
              readOnly: true
      volumes:
        - name: "config"
          emptyDir: {}
        - name: "app-tmp"
          emptyDir: {}
        - name: "init-tmp"
          emptyDir: {}
        - name: "service-tls"
          secret:
            secretName: {{ include "app.serviceTlsSecretName" . | quote }}
            items:
              - key: "tls.crt"
                path: {{ $serviceCertificateFilename | quote }}
              - key: "tls.key"
                path: {{ $servicePrivateKeyFilename | quote }}
